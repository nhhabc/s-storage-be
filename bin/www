#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('s-storage-be:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Websocket
 */

const {Server} = require('socket.io')
const io = new Server(server,{
  cors: {
    origin: "https://s-storage.xyz"
  }
})

const jwt = require('jsonwebtoken')

const users = [];
io.on('connection', (socket) => {
  console.log(`We have a new connection`)

  socket.on('join', (token) => {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('a user ' + decoded.id + ' connected')
    users.push({userId: decoded.id})
    console.log(users)
    // socket.emit('message', {user:'admin', text: `${username} has joined`})
    // socket.broadcast.emit('message', {user:'admin', text: `Sbd has joined`})
  })
1
  socket.on('sendMessage', (data) => {
    io.emit('message', {
      data,
      from: data._owner,
      to: data.sendTo
    })
  })


  socket.on('Disconnect', (id) => {
    console.log('user ' + id + ' disconnected')
    // socket.broadcast.emit('message', {user:'admin', text: `${username} has left`})
    users.filter(users => users.userId !== id);
    console.log(users)
  })
})

/*
const WebSocket = require("ws")
const wss = new WebSocket.Server({server: server, path: "/wss"});
wss.on('connection', ws => {
  ws.on('message', message => {
    ws.send(message)
  })
})
 */

// const expressWs = require('express-ws')(app, server);
// app.ws('/wss', function(ws, req) {
//
//   ws.on('connection', function(msg) {
//     console.log("connted")
//   });
//
//   ws.on('open', function(msg) {
//     console.log("Asdasd");
//   });
//
//   ws.on('message', function(msg) {
//     console.log(msg);
//   });
//   console.log('socket');
// });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
